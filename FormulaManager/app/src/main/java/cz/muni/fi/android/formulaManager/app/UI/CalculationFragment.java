package cz.muni.fi.android.formulaManager.app.UI;


import android.graphics.Color;
import android.graphics.RectF;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;


import com.larvalabs.svgandroid.SVG;
import com.larvalabs.svgandroid.SVGParseException;
import com.larvalabs.svgandroid.SVGParser;

import org.matheclipse.core.eval.EvalUtilities;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import cz.muni.fi.android.formulaManager.app.Formula;
import cz.muni.fi.android.formulaManager.app.Parameter;
import cz.muni.fi.android.formulaManager.app.R;
import cz.muni.fi.android.formulaManager.app.UI.wrapper.ParameterWrapper;
import cz.muni.fi.android.formulaManager.app.UI.wrapper.RegularParameterWrapper;
import cz.muni.fi.android.formulaManager.app.UI.wrapper.StepParameterWrapper;

/**
 * Created by Majo on 10. 4. 2014.
 */
public class CalculationFragment extends Fragment {

    private static final String TAG = "cz.fi.android.formulamanager.CalculationFragment";
    private static final String RAW_SVG = "<?xml version=\"1.0\"?>\n" +
            "\n" +
            "<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.0//EN' 'http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd'>\n" +
            "<svg style=\"fill-opacity:1; color-rendering:auto; color-interpolation:auto; stroke:black; text-rendering:auto; stroke-linecap:square; stroke-miterlimit:10; stroke-opacity:1; shape-rendering:auto; fill:black; stroke-dasharray:none; font-weight:normal; stroke-width:1; font-family:&apos;Dialog&apos;; font-style:normal; stroke-linejoin:miter; font-size:12; stroke-dashoffset:0; image-rendering:auto;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"65\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"64\">\n" +
            "  <!--Generated by the Batik Graphics2D SVG Generator-->\n" +
            "  <defs id=\"genericDefs\" />\n" +
            "  <g>\n" +
            "    <g style=\"fill:white; stroke:white;\">\n" +
            "      <rect x=\"0\" y=\"0\" width=\"65\" style=\"stroke:none;\" height=\"64\" />\n" +
            "    </g>\n" +
            "    <g transform=\"scale(20,20) translate(0.25,0.44)\" style=\"font-size:1; text-rendering:geometricPrecision; color-rendering:optimizeQuality; image-rendering:optimizeQuality; font-family:&apos;jlm_cmex10&apos;; color-interpolation:linearRGB;\">\n" +
            "      <path d=\"M0.6562 2.3594 Q0.5469 2.25 0.4531 2.1094 Q0.3594 1.9688 0.3047 1.8125 Q0.25 1.6562 0.2266 1.4922 Q0.2031 1.3281 0.2031 1.1562 Q0.2031 0.9844 0.2266 0.8203 Q0.25 0.6562 0.3047 0.5 Q0.3594 0.3438 0.4531 0.2109 Q0.5469 0.0781 0.6562 -0.0312 Q0.6562 -0.0469 0.6719 -0.0469 L0.6875 -0.0469 Q0.7031 -0.0469 0.7031 -0.0391 Q0.7031 -0.0312 0.7031 -0.0312 Q0.7031 -0.0312 0.7031 -0.0312 Q0.5781 0.0938 0.5 0.2266 Q0.4219 0.3594 0.375 0.5156 Q0.3281 0.6719 0.3125 0.8359 Q0.2969 1 0.2969 1.1562 Q0.2969 1.3281 0.3125 1.4844 Q0.3281 1.6406 0.375 1.7969 Q0.4219 1.9531 0.5078 2.0938 Q0.5938 2.2344 0.7031 2.3438 Q0.7031 2.3438 0.7031 2.3438 Q0.7031 2.3594 0.7031 2.3594 Q0.7031 2.3594 0.6875 2.3594 L0.6719 2.3594 Q0.6562 2.3594 0.6562 2.3594 Z\" style=\"stroke:none;\" />\n" +
            "    </g>\n" +
            "    <g transform=\"matrix(20,0,0,20,0,0) translate(1.1061,1.1735)\" style=\"font-size:1; text-rendering:geometricPrecision; color-rendering:optimizeQuality; image-rendering:optimizeQuality; font-family:&apos;jlm_cmr10&apos;; color-interpolation:linearRGB;\">\n" +
            "      <path d=\"M0.2969 -0.6406 L0.2969 -0.0781 Q0.2969 -0.0469 0.3125 -0.0469 Q0.3281 -0.0312 0.3906 -0.0312 L0.4219 -0.0312 L0.4219 0 Q0.3906 0 0.25 0 Q0.125 0 0.0938 0 L0.0938 -0.0312 L0.125 -0.0312 Q0.2031 -0.0312 0.2188 -0.0469 L0.2188 -0.0469 Q0.2188 -0.0625 0.2188 -0.0781 L0.2188 -0.5938 Q0.1719 -0.5781 0.0938 -0.5781 L0.0938 -0.6094 Q0.2031 -0.6094 0.2656 -0.6719 Q0.2969 -0.6719 0.2969 -0.6562 L0.2969 -0.6562 L0.2969 -0.6562 Q0.2969 -0.6562 0.2969 -0.6406 Z\" style=\"stroke:none;\" />\n" +
            "    </g>\n" +
            "    <g transform=\"matrix(20,0,0,20,0,0) translate(1.6061,1.1735)\" style=\"font-size:1; text-rendering:geometricPrecision; color-rendering:optimizeQuality; image-rendering:optimizeQuality; font-family:&apos;jlm_cmr10&apos;; color-interpolation:linearRGB;\">\n" +
            "      <path d=\"M0.4531 -0.3125 Q0.4531 -0.1719 0.4219 -0.0938 Q0.3594 0.0156 0.25 0.0156 Q0.1562 0.0156 0.1094 -0.0469 Q0.0938 -0.0625 0.0781 -0.0781 Q0.0312 -0.1562 0.0312 -0.3125 Q0.0312 -0.4688 0.0781 -0.5469 Q0.125 -0.6562 0.2344 -0.6719 L0.25 -0.6719 Q0.3438 -0.6719 0.3906 -0.5938 L0.3906 -0.5938 Q0.4062 -0.5781 0.4219 -0.5469 Q0.4531 -0.4688 0.4531 -0.3125 ZM0.25 0 L0.25 0 Q0.3125 0 0.3438 -0.0625 Q0.3594 -0.0938 0.3594 -0.125 Q0.375 -0.1875 0.375 -0.3281 Q0.375 -0.4688 0.3594 -0.5312 Q0.3438 -0.625 0.2812 -0.6406 Q0.2656 -0.6406 0.25 -0.6406 Q0.1719 -0.6406 0.1406 -0.5781 Q0.1406 -0.5469 0.125 -0.5156 Q0.125 -0.4688 0.125 -0.3281 Q0.125 -0.1875 0.1406 -0.125 Q0.1562 -0.0312 0.2188 0 Q0.2344 0 0.25 0 Z\" style=\"stroke:none;\" />\n" +
            "    </g>\n" +
            "    <g transform=\"matrix(20,0,0,20,0,0) translate(1.3561,2.536)\" style=\"font-size:1; text-rendering:geometricPrecision; color-rendering:optimizeQuality; image-rendering:optimizeQuality; font-family:&apos;jlm_cmr10&apos;; color-interpolation:linearRGB;\">\n" +
            "      <path d=\"M0.2969 -0.3594 L0.2969 -0.3594 Q0.3906 -0.3281 0.4375 -0.25 Q0.4531 -0.2188 0.4531 -0.1719 Q0.4531 -0.0938 0.3906 -0.0312 Q0.3281 0.0156 0.25 0.0156 Q0.1406 0.0156 0.0781 -0.0312 Q0.0469 -0.0781 0.0469 -0.1406 Q0.0469 -0.1875 0.0781 -0.1875 Q0.0938 -0.1875 0.0938 -0.1875 Q0.1406 -0.1875 0.1562 -0.1562 Q0.1562 -0.1406 0.1562 -0.1406 Q0.1562 -0.0938 0.125 -0.0781 Q0.1094 -0.0781 0.0938 -0.0781 Q0.125 -0.0156 0.2188 -0.0156 Q0.2344 0 0.2344 0 Q0.3125 0 0.3281 -0.0625 Q0.3594 -0.1094 0.3594 -0.1719 Q0.3594 -0.2969 0.2812 -0.3281 Q0.25 -0.3438 0.2344 -0.3438 L0.1875 -0.3438 Q0.1719 -0.3438 0.1719 -0.3438 Q0.1719 -0.3594 0.1875 -0.3594 Q0.2031 -0.3594 0.2188 -0.3594 Q0.2656 -0.3594 0.2969 -0.4062 L0.2969 -0.4062 L0.2969 -0.4062 L0.2969 -0.4062 L0.2969 -0.4062 L0.3125 -0.4219 Q0.3438 -0.4688 0.3438 -0.5312 Q0.3438 -0.625 0.2656 -0.6406 Q0.25 -0.6406 0.2344 -0.6406 Q0.1719 -0.6406 0.125 -0.5938 Q0.1094 -0.5938 0.1094 -0.5781 Q0.1719 -0.5781 0.1719 -0.5312 Q0.1719 -0.5 0.1406 -0.4844 Q0.125 -0.4844 0.125 -0.4844 Q0.0781 -0.4844 0.0781 -0.5156 L0.0781 -0.5156 L0.0781 -0.5156 Q0.0625 -0.5156 0.0625 -0.5312 Q0.0625 -0.5938 0.1406 -0.6406 Q0.1875 -0.6719 0.25 -0.6719 Q0.3438 -0.6719 0.3906 -0.6094 L0.3906 -0.6094 Q0.4375 -0.5781 0.4375 -0.5312 Q0.4375 -0.4375 0.3594 -0.3906 Q0.3281 -0.3594 0.2969 -0.3594 Z\" style=\"stroke:none;\" />\n" +
            "    </g>\n" +
            "    <g transform=\"matrix(20,0,0,20,0,0) translate(2.2261,0.44)\" style=\"font-size:1; text-rendering:geometricPrecision; color-rendering:optimizeQuality; image-rendering:optimizeQuality; font-family:&apos;jlm_cmex10&apos;; color-interpolation:linearRGB;\">\n" +
            "      <path d=\"M0.0469 2.3594 Q0.0312 2.3594 0.0312 2.3438 Q0.0312 2.3438 0.0312 2.3438 Q0.1562 2.2344 0.2344 2.0938 Q0.3125 1.9531 0.3594 1.8047 Q0.4062 1.6562 0.4219 1.4922 Q0.4375 1.3281 0.4375 1.1562 Q0.4375 0.9844 0.4219 0.8281 Q0.4062 0.6719 0.3594 0.5156 Q0.3125 0.3594 0.2344 0.2266 Q0.1562 0.0938 0.0312 -0.0312 Q0.0312 -0.0312 0.0312 -0.0312 Q0.0312 -0.0469 0.0469 -0.0469 L0.0625 -0.0469 Q0.0781 -0.0469 0.0781 -0.0312 Q0.2031 0.0781 0.2891 0.2109 Q0.375 0.3438 0.4297 0.5 Q0.4844 0.6562 0.5078 0.8203 Q0.5312 0.9844 0.5312 1.1562 Q0.5312 1.3281 0.5078 1.4922 Q0.4844 1.6562 0.4297 1.8125 Q0.375 1.9688 0.2891 2.1094 Q0.2031 2.25 0.0781 2.3594 Q0.0781 2.3594 0.0625 2.3594 L0.0469 2.3594 Z\" style=\"stroke:none;\" />\n" +
            "    </g>\n" +
            "  </g>\n" +
            "</svg>";

    private Formula formula;
    private Map<String,ParameterWrapper> parametersMap;
    private static final ViewGroup.MarginLayoutParams MATCH_PARENT = new ViewGroup.MarginLayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
//    private static final EvalUtilities EVALUATION_ENGINE

    public CalculationFragment() {
        formula = new Formula();
        formula.setId(0l);
        formula.setName("");
        formula.setCategory("");
        formula.setParams(new ArrayList<Parameter>());
        formula.setRawFormula("");
        parametersMap = new HashMap<String, ParameterWrapper>(); {
        }
    }

    public CalculationFragment(Formula formula) {
        this.formula = formula;
        parametersMap = new HashMap<String, ParameterWrapper>();
    }

    //TODO button to share is visible if only list is on screen - vertical list fragment - we should remove it somehow in calculation fragment lifecycle

    public long getShownId() {
        return formula.getId();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view  = inflater.inflate(R.layout.calculation_layout, container, false);
       /* if(container!= null) {
        view = (View) container.findViewById(R.layout.calculation_layout);

        }
        if(view == null) {
            view = (View) inflater.inflate(R.layout.calculation_layout, container,false);
        }*/


        TextView formulaName = (TextView) view.findViewById(R.id.calculation_formula_name);
        formulaName.setText(formula.getName());
        TextView formulaCategory= (TextView) view.findViewById(R.id.calculation_formula_category);
        formulaCategory.setText(formula.getCategory());
        CheckBox formulaFavourite = (CheckBox) view.findViewById(R.id.calculation_favorite);
        formulaFavourite.setChecked(formula.isFavorite());

        ViewGroup calculationFormulaContent = (ViewGroup)  view.findViewById(R.id.calculation_formula_content);
        boolean useRawFormulaFlag = !formula.hasSvgFormula();
        Log.d(TAG, formula.hasSvgFormula() ? formula.getSvgFormula() : "null");
        if(!useRawFormulaFlag)
            try {
                    createFormulaImage(calculationFormulaContent);
                } catch (SVGParseException  ex) {
//                    svg is broken fallback to textview
                useRawFormulaFlag = true;
        }
        if(useRawFormulaFlag) {
            createFormulaText(calculationFormulaContent);
        }
        ViewGroup calculationParametersLayout = (ViewGroup)  view.findViewById(R.id.calculation_formula_parameters);
        for (Parameter parameter : formula.getParams()) {
            createParameterEditField(calculationParametersLayout, parameter);
        }

        return view;
    }

    private void createParameterEditField(ViewGroup calculationParametersLayout, Parameter parameter) {
        ParameterWrapper parameterWrapper = null;
        switch(parameter.getType()){

            case REGULAR:
                parameterWrapper = new RegularParameterWrapper(getActivity(),calculationParametersLayout,parameter);
                break;
            case INDEX:
                // TODO index wrapper
                parameterWrapper = null;
                break;
            case STEP:
                parameterWrapper = new StepParameterWrapper(getActivity(),calculationParametersLayout,parameter);
                break;
        }
        parametersMap.put(parameter.getName(),parameterWrapper);
    }

    private void createFormulaText(ViewGroup calculationFormulaContent) {
        TextView formulaText = new TextView(getActivity());
        formulaText.setText(formula.getRawFormula());
        formulaText.setLayoutParams(MATCH_PARENT);
        formulaText.setBackgroundColor(Color.WHITE);
        formulaText.setTextColor(Color.BLACK);
        formulaText.setTextSize(40);
        calculationFormulaContent.addView(formulaText);
    }

    private void createFormulaImage(ViewGroup calculationFormulaContent) {
        SVG svg = SVGParser.getSVGFromString(formula.getSvgFormula());
        ImageView formulaSvgImage = new ImageView(getActivity());
        resizeSvgToMatchParent(calculationFormulaContent, svg);
        formulaSvgImage.setImageDrawable(svg.createPictureDrawable());
        formulaSvgImage.setLayoutParams(MATCH_PARENT);
        calculationFormulaContent.addView(formulaSvgImage);
    }

    private void resizeSvgToMatchParent(ViewGroup calculationFormulaContent, SVG svg) {
        if( calculationFormulaContent.getWidth() == 0) {return;}
        RectF limits = svg.getLimits();
        float height = limits.height();
        float width = limits.width();
        float ratio = height/width;
        float maxHeight = dipToPixels(300);
        float maxWidth = calculationFormulaContent.getWidth();
        int computedWidth;
        int computedHeight;
        if(maxHeight*ratio > maxWidth) {
            computedHeight= (int) (maxWidth / ratio);
            computedWidth= (int) maxWidth;
        }
        else {
            computedHeight = (int) maxHeight;
            computedWidth = (int) (maxHeight * ratio);
        }
        svg.resizePicture(computedHeight,computedWidth);
    }

    private float dipToPixels(float dipValue) {
        DisplayMetrics metrics = getActivity().getBaseContext().getResources().getDisplayMetrics();
        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dipValue, metrics);
    }
}
